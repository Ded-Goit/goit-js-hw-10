{"version":3,"file":"2-snackbar.js","sources":["../src/js/2-snackbar.js"],"sourcesContent":["// Library import described in the documentation\nimport iziToast from 'izitoast';\n// Additional style import\nimport 'izitoast/dist/css/iziToast.min.css';\n//Get data from the form\nconst form = document.querySelector('.form'); //Find the HTML element of the form and store it in the form variable.\n//Add a submit event handler to the form.\nform.addEventListener('submit', event => {\n  event.preventDefault(); //we cancel the standard behavior of the form (reloading the page).\n  const delay = parseInt(form.elements.delay.value); //we get the value from the input field with the name delay, converting it to an integer\n  const state = form.elements.state.value; //we get the value from the state drop-down list, which can be fulfilled (success) or rejected (error).\n  // Create a trade\n  /**setTimeout delays execution for the specified delay time.\n   * Depending on the value of state:\n   * If fulfilled, resolve(delay) is called, which means successful fulfillment of the promise.\n   * If rejected, reject(delay) is called, which means an error */\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (state === 'fulfilled') {\n        resolve(delay);\n      } else {\n        reject(delay);\n      }\n    }, delay);\n  });\n  //Process the result of the promise\n  /**If the promise is resolved, then .then() is called.\n   * Inside then(), iziToast.success() is used,\n   * which shows a green pop-up notification with a message that\n   *  the promise was fulfilled in delay milliseconds. */\n  promise\n    .then(delay => {\n      iziToast.success({\n        title: 'Succes',\n        message: `✅ Fulfilled promise in ${delay}ms`,\n      });\n    })\n    /**If the promise is rejected, .catch() is called.\n     * Inside catch(), iziToast.error() is used,\n     * which shows a red pop-up notification with a message that\n     * the promise was rejected in delay milliseconds. */\n    .catch(delay => {\n      iziToast.error({\n        title: 'Error',\n        message: `❌ Rejected promise in ${delay}ms`,\n      });\n    });\n  form.reset(); //clear all form fields after submission.\n});\n"],"names":["form","event","delay","state","resolve","reject","iziToast"],"mappings":"oFAKA,MAAMA,EAAO,SAAS,cAAc,OAAO,EAE3CA,EAAK,iBAAiB,SAAUC,GAAS,CACvCA,EAAM,eAAc,EACpB,MAAMC,EAAQ,SAASF,EAAK,SAAS,MAAM,KAAK,EAC1CG,EAAQH,EAAK,SAAS,MAAM,MAMlB,IAAI,QAAQ,CAACI,EAASC,IAAW,CAC/C,WAAW,IAAM,CACXF,IAAU,YACZC,EAAQF,CAAK,EAEbG,EAAOH,CAAK,CAEf,EAAEA,CAAK,CACZ,CAAG,EAOE,KAAKA,GAAS,CACbI,EAAS,QAAQ,CACf,MAAO,SACP,QAAS,0BAA0BJ,CAAK,IAChD,CAAO,CACP,CAAK,EAKA,MAAMA,GAAS,CACdI,EAAS,MAAM,CACb,MAAO,QACP,QAAS,yBAAyBJ,CAAK,IAC/C,CAAO,CACP,CAAK,EACHF,EAAK,MAAK,CACZ,CAAC"}